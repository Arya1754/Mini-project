/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/inventory.js":
/*!********************************!*\
  !*** ./assets/js/inventory.js ***!
  \********************************/
/***/ (() => {

eval("// import { initializeApp } from 'firebase/app';\r\n// import { getFirestore, collection, addDoc, onSnapshot, doc, deleteDoc, getDoc } from 'firebase/firestore';\r\n// import { getAuth } from 'firebase/auth';\r\n\r\n// // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n// const firebaseConfig = {\r\n//     apiKey: \"AIzaSyB0pGEBA01P1KON0fE1wfKRjejnDj2OCuY\",\r\n//     authDomain: \"miniproject-8c47c.firebaseapp.com\",\r\n//     projectId: \"miniproject-8c47c\",\r\n//     storageBucket: \"miniproject-8c47c.appspot.com\",\r\n//     messagingSenderId: \"178975701060\",\r\n//     appId: \"1:178975701060:web:b4a5a45a02c0bdfc2c6411\",\r\n//     measurementId: \"G-7J80SKPLFV\"\r\n//   };\r\n\r\n// // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n// const app = initializeApp(firebaseConfig);\r\n// const db = getFirestore(app);\r\n// const auth = getAuth();\r\n  \r\n// // Event listener for form submission to add items to Firestore\r\n// document.getElementById('addItemForm').addEventListener('submit', async function(event) {\r\n//     event.preventDefault();\r\n\r\n//     const itemName = document.querySelector('[name=\"item_name\"]').value;\r\n//     const quantity = parseInt(document.querySelector('[name=\"quantity\"]').value, 10);\r\n//     const price = parseFloat(document.querySelector('[name=\"price\"]').value);\r\n\r\n//     try {\r\n//         const docRef = await addDoc(collection(db, \"inventory\"), {\r\n//             name: itemName,\r\n//             quantity: quantity,\r\n//             price: price\r\n//         });\r\n//         console.log(\"Document written with ID: \", docRef.id);\r\n//         loadItems(); // Reload the items from Firestore after adding\r\n//     } catch (error) {\r\n//         console.error(\"Error adding document: \", error);\r\n//     }\r\n// });\r\n\r\n// // Function to load items from Firestore and display them in the HTML table\r\n// async function loadItems() {\r\n//     const querySnapshot = await getDocs(collection(db, \"inventory\"));\r\n//     const tableBody = document.querySelector('table tbody');\r\n//     tableBody.innerHTML = ''; // Clear existing table data\r\n\r\n//     querySnapshot.forEach((doc) => {\r\n//         const row = `<tr>\r\n//             <td>${doc.data().name}</td>\r\n//             <td>${doc.data().quantity}</td>\r\n//             <td>$${doc.data().price.toFixed(2)}</td>\r\n//             <td>$${(doc.data().quantity * doc.data().price).toFixed(2)}</td>\r\n//             <td>\r\n//                 <button onclick=\"editItem('${doc.id}')\">Edit</button>\r\n//                 <button onclick=\"deleteItem('${doc.id}')\">Delete</button>\r\n//             </td>\r\n//         </tr>`;\r\n//         tableBody.innerHTML += row;\r\n//     });\r\n// }\r\n\r\n// // Delete an item\r\n// async function deleteItem(docId) {\r\n//     try {\r\n//         await deleteDoc(doc(db, \"inventory\", docId));\r\n//         console.log(\"Document successfully deleted!\");\r\n//         loadItems(); // Reload the items from Firestore after deleting\r\n//     } catch (error) {\r\n//         console.error(\"Error removing document: \", error);\r\n//     }\r\n// }\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const inventoryForm = document.querySelector('.add-item form');\r\n    const inventoryTable = document.querySelector('.inventory-list table tbody');\r\n  \r\n    // Function to add an inventory item\r\n    function addInventoryItem(event) {\r\n      event.preventDefault(); // Prevent form submission from reloading the page\r\n  \r\n      const itemName = event.target.item_name.value;\r\n      const quantity = event.target.quantity.value;\r\n      const price = event.target.price.value;\r\n      const totalValue = (parseFloat(quantity) * parseFloat(price)).toFixed(2);\r\n  \r\n      const newRow = `\r\n        <tr>\r\n          <td>${itemName}</td>\r\n          <td>${quantity}</td>\r\n          <td>$${price}</td>\r\n          <td>$${totalValue}</td>\r\n          <td>\r\n            <button onclick=\"editItem(this)\">Edit</button>\r\n            <button onclick=\"deleteItem(this)\">Delete</button>\r\n          </td>\r\n        </tr>\r\n      `;\r\n  \r\n      inventoryTable.innerHTML += newRow;\r\n  \r\n      // Clear form after submission\r\n      inventoryForm.reset();\r\n    }\r\n  \r\n    // Function to delete an item\r\n    function deleteItem(button) {\r\n      const row = button.parentNode.parentNode;\r\n      row.parentNode.removeChild(row);\r\n    }\r\n  \r\n    // Add event listener to the form\r\n    inventoryForm.addEventListener('submit', addInventoryItem);\r\n  \r\n    // Expose functions to global scope for inline handlers\r\n    window.deleteItem = deleteItem;\r\n  \r\n    // Function to edit an item (placeholder)\r\n    function editItem(button) {\r\n      const row = button.parentNode.parentNode;\r\n      const cells = row.querySelectorAll('td');\r\n      alert('Edit functionality not implemented! Displaying current values: ' + Array.from(cells).map(cell => cell.textContent).join(', '));\r\n    }\r\n  \r\n    window.editItem = editItem;\r\n  });\r\n  \r\n\n\n//# sourceURL=webpack://mini-project/./assets/js/inventory.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./assets/js/inventory.js"]();
/******/ 	
/******/ })()
;